
trigger:
  batch: true
  branches:
    include:
      - main
      - PBI95062
  paths:
    include:
      - "**.bicep"
  # pr:
  # branches:
  #   include:
  #   - main

variables:
  - group: csu-bicep-environment
  - name: ResourceGroupName
    value: "rsg-github-pr-$(System.PullRequest.PullRequestId)"
  - name: ManagementGroupPrefix
    value: "PR-$(System.PullRequest.PullRequestId)"
  - name: TopLevelManagementGroupDisplayName
    value: "PR $(System.PullRequest.PullRequestId) Azure Landing Zones"
  - name: SubscriptionName
    value: "sub-unit-test-pr-$(System.PullRequest.PullRequestId)"
  - name: Location
    value: "eastus"

jobs:
- job: bicep_unit_tests
  displayName: Test Bicep Files for PR
  pool: ALZ-Bicep
    #vmImage: ubuntu-latest
  steps:
  # - task: PublishPipelineArtifact@1
  #   displayName: Publish directory as Artifact
  #   inputs:
  #     targetPath: '$(System.DefaultWorkingDirectory)'
  #     artifactName: alzbicep

  - task: Bash@3
    displayName: Install relevant software on self-hosted runner
    name: install_sw
    inputs:
      targetType: 'inline'
      script: |
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        # Mark it as executable
        chmod +x ./bicep
        # Add bicep to your PATH (requires admin)
        sudo mv ./bicep /usr/local/bin/bicep
        # Verify you can now access the 'bicep' command
        bicep --help

  - task: PowerShell@2
    displayName: Bicep Build to Test for PR
    inputs:
      targetType: 'inline'
      script: |
          Get-ChildItem -Recurse -Filter '*.bicep' -Exclude 'callModuleFromACR.example.bicep','orch-hubSpoke.bicep' | ForEach-Object {
            Write-Information "==> Attempting Bicep Build For File: $_" -InformationAction Continue
              $output = bicep build $_.FullName 2>&1
                if ($LastExitCode -ne 0)
                  {
                    throw $output
                  }
                Else
                  {
                    echo $output
                  }   
                }

- job: bicep_deploy
  dependsOn: bicep_unit_tests
  displayName: Deploy Bicep Files for PR
  pool: ALZ-Bicep
    #vmImage: ubuntu-latest
  steps:
  # - download: current
  #   artifact: alzbicep

  - task: Bash@3
    displayName: Check for managementGroup Changes
    name: git_management_diff
    inputs:
      targetType: 'inline'
      script: |
          git_diff1=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/managementGroups/managementGroups.bicep)
          git_diff2=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep)
          git_diff3=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/policy/definitions/custom-policy-definitions.bicep)
          git_diff4=$(git diff --name-only HEAD^ HEAD alzbicep/infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep)
          git_diff5=$(git diff --name-only HEAD^ HEAD alzbicep/infra-as-code/bicep/modules/subscriptionPlacement/subscriptionPlacement.bicep)
          git_diff6=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.bicep)
          if [[ $git_diff1 != '' ]] || [[ $git_diff2 != '' ]] || [[ $git_diff3 != '' ]] || [[ $git_diff4 != '' ]] || [[ $git_diff5 != '' ]] || [[ $git_diff6 != '' ]]
            then echo "gitManagementOutput=setmgmt"  >> $GITHUB_ENV
          fi

  - task: Bash@3
    displayName: Check for logging Changes
    name: git_logging_diff
    inputs:
      targetType: 'inline'
      script: |
          git_logging=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/logging/logging.bicep)
          echo "##vso[task.setvariable variable=gitLoggingOUTPUT]$git_logging"

  - task: Bash@3
    displayName: Check for hubNetworking Changes
    name: git_hubnetworking_diff
    inputs:
      targetType: 'inline'
      script: |
          git_hub=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/hubNetworking/hubNetworking.bicep)
          echo "##vso[task.setvariable variable=gitHubOUTPUT]$git_hub"

  - task: Bash@3
    displayName: Check for spokeNetworking Changes
    name: git_spokenetworking_diff
    inputs:
      targetType: 'inline'
      script: |
        git_spoke=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/spokeNetworking/spokeNetworking.bicep)
        echo "gitSpokeOUTPUT=$git_spoke" >> $GITHUB_ENV
        echo "##vso[task.setvariable variable=gitSpokeOUTPUT]$git_spoke"

  - task: Bash@3
    displayName: INTERIM DELETE BEFORE PROD
    name: git_hardcode_variables
    inputs:
      targetType: 'inline'
      script: |
        echo "##vso[task.setvariable variable=gitSpokeOUTPUT]something"
        echo "##vso[task.setvariable variable=gitHubOUTPUT]something"
        echo "##vso[task.setvariable variable=gitLoggingOUTPUT]something"
        echo "##vso[task.setvariable variable=gitManagementOUTPUT]something"

  - task: Bash@3
    displayName: Login to Azure
    name: git_azlogin
    inputs:
      targetType: 'inline'
      script: |
        az login --service-principal --username $(azclilogin) --password $(azclipwd) --tenant $(azclitenant)

  - task: Bash@3
    displayName: Az CLI Create Subscription for PR
    name: create_subscription
    condition: or(ne('${{ variables.gitManagementOutput }}', ''), ne('${{ variables.gitLoggingOUTPUT }}', ''), ne('${{ variables.gitSpokeOUTPUT }}', ''), ne('${{ variables.gitHubOUTPUT }}', ''))
    inputs:
      targetType: 'inline'
      script: |
        subid=$(az deployment tenant create --name "deploy-$(SubscriptionName)" --location $(Location) --template-file infra-as-code/bicep/CRML/subscriptionAlias/subscriptionAlias.bicep --parameters @infra-as-code/bicep/CRML/subscriptionAlias/subscriptionAlias.parameters.example.json --parameters parSubscriptionBillingScope=$(ALZ-AZURE-SECRET-EA-BILLING-ACCOUNT) parSubscriptionName=$(SubscriptionName) | jq .properties.outputs.outSubscriptionId.value)
        echo "##vso[task.setvariable variable=SUBIDOUTPUT]$subid"

  - task: Bash@3
    displayName: Az CLI Refresh subscription list
    name: refresh_subscription
    condition: or(ne('${{ variables.gitManagementOutput }}', ''), ne('${{ variables.gitLoggingOUTPUT }}', ''), ne('${{ variables.gitSpokeOUTPUT }}', ''), ne('${{ variables.gitHubOUTPUT }}', ''))
    inputs:
      targetType: 'inline'
      script: |
        az account list --refresh        
        
  - task: Bash@3    
    displayName: Az CLI Create Resource Group for PR
    name: create_rsg
    condition: or(ne('${{ variables.gitManagementOutput }}', ''), ne('${{ variables.gitLoggingOUTPUT }}', ''), ne('${{ variables.gitSpokeOUTPUT }}', ''), ne('${{ variables.gitHubOUTPUT }}', ''))
    inputs:
      targetType: 'inline'
      script: |
        az account set --subscription $(SUBIDOUTPUT)
        if [ $(az group exists --name $(ResourceGroupName) ) == false ]; then
            sleep 300
        fi
        az group create --name $(ResourceGroupName) --location $(Location)

  - task: Bash@3     
    displayName: Az CLI Deploy Management Groups for PR
    name: create_mgs
    condition: or(ne('${{ variables.gitManagementOutput }}', ''), ne('${{ variables.gitLoggingOUTPUT }}', ''), ne('${{ variables.gitSpokeOUTPUT }}', ''), ne('${{ variables.gitHubOUTPUT }}', ''))
    inputs:
      targetType: 'inline'
      script: |
        az deployment tenant create --template-file infra-as-code/bicep/modules/managementGroups/managementGroups.bicep --parameters @infra-as-code/bicep/modules/managementGroups/managementGroups.parameters.example.json parTopLevelManagementGroupPrefix=$(ManagementGroupPrefix) --location $(Location)
  
  - task: Bash@3  
    displayName: Az CLI Deploy Custom Role Definitions for PR
    name: create_rbac_roles
    condition: ne('${{ variables.gitManagementOutput }}', '')
    inputs:
      targetType: 'inline'
      script: |
        az deployment mg create --template-file infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep  --parameters @infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.parameters.example.json parAssignableScopeManagementGroupId=$(ManagementGroupPrefix) --location $(Location) --management-group-id $(ManagementGroupPrefix)
  
  - task: Bash@3    
    displayName: Az CLI Deploy Custom Policy Definitions for PR
    name: create_policy_defs
    condition: ne('${{ variables.gitManagementOutput }}', '')
    inputs:
      targetType: 'inline'
      script: |
        az deployment mg create --template-file infra-as-code/bicep/modules/policy/definitions/custom-policy-definitions.bicep  --parameters @infra-as-code/bicep/modules/policy/definitions/custom-policy-definitions.parameters.example.json parTargetManagementGroupID=$(ManagementGroupPrefix) --location $(Location) --management-group-id $(ManagementGroupPrefix) 
  
  - task: Bash@3    
    displayName: Az CLI Deploy Logging for PR
    name: create_logging
    condition: ne('${{ variables.gitLogginOutput }}', '')
    inputs:
      targetType: 'inline'
      script: |
        az deployment group create --resource-group $(ResourceGroupName) --template-file infra-as-code/bicep/modules/logging/logging.bicep --parameters @infra-as-code/bicep/modules/logging/logging.parameters.example.json

  - task: Bash@3    
    displayName: Az CLI Policy Assignment DINE for PR
    name: create_policy_assignment_dine
    condition: ne('${{ variables.gitManagementOutput }}', '')
    inputs:
      targetType: 'inline'
      script: |
        az deployment mg create --template-file infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep --parameters @infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.parameters.example-dine.json --location $(Location) --management-group-id "$(ManagementGroupPrefix)-landingzones"
        az deployment mg create --template-file infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.bicep --parameters @infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.parameters.service-principal.example.json --location $(Location) --management-group-id "$(ManagementGroupPrefix)-platform"

  - task: Bash@3    
    displayName: Az CLI Subscription Placement for PR
    name: move_sub
    condition: or(ne('${{ variables.gitManagementOutput }}', ''), ne('${{ variables.gitLoggingOUTPUT }}', ''), ne('${{ variables.gitSpokeOUTPUT }}', ''), ne('${{ variables.gitHubOUTPUT }}', ''))
    inputs:
      targetType: 'inline'
      script: |
        az deployment mg create --template-file infra-as-code/bicep/modules/subscriptionPlacement/subscriptionPlacement.bicep --parameters parTargetManagementGroupId=$(ManagementGroupPrefix) parSubscriptionIds='["$(SUBIDOUTPUT)"]' --location $(Location) --management-group-id $(ManagementGroupPrefix)

  - task: Bash@3    
    displayName: Az CLI Deploy Hub Networking for PR
    name: create_hub_network
    condition: ne('${{ variables.gitHubOUTPUT }}', '')
    inputs:
      targetType: 'inline'
      script: |
        az deployment group create --resource-group $(ResourceGroupName) --template-file infra-as-code/bicep/modules/hubNetworking/hubNetworking.bicep

  - task: Bash@3              
    displayName: Az CLI Deploy Spoke Networking for PR
    name: create_spoke_network
    condition: ne('${{ variables.gitSpokeOUTPUT }}', '')
    inputs:
      targetType: 'inline'
      script: |
        az deployment group create --resource-group $(ResourceGroupName) --template-file infra-as-code/bicep/modules/spokeNetworking/spokeNetworking.bicep

- job: bicep_cleanup
  dependsOn: bicep_deploy
  displayName: Cleanup Bicep Deployment for PR
  pool: ALZ-Bicep
    #vmImage: ubuntu-latest
  #environment: BicepUnitTests
  steps:
  - task: Bash@3
    displayName: Login to Azure
    name: git_azlogin
    inputs:
      targetType: 'inline'
      script: |
        az login --service-principal --username $(azclilogin) --password $(azclipwd) --tenant $(azclitenant)

  - task: PowerShell@2
    displayName: Az CLI Remove/Cleanup Deployment
    #  if: needs.bicep_deploy.outputs.isDeployed
    inputs:
      targetType: 'inline'
      script: |
        install-module -Name "Az.Accounts" -MinimumVersion "2.5.2" -Force
        install-module -Name "Az.Resources" -MinimumVersion "4.3.0" -Force
        install-module -Name "Az.ResourceGraph" -MinimumVersion "0.7.7"-Force
        .github/scripts/Wipe-ESLZAzTenant.ps1 -tenantRootGroupID "$(ALZ-AZURE-SECRET-TENANT-ID)" -intermediateRootGroupID "$(ManagementGroupPrefix)" -subscriptionName "$(SubscriptionName)"

