name: Bicep Build Test for PR

on:
  pull_request:
    branches:
      - main
    paths:
      - "**.bicep"
  workflow_dispatch: {}

env:
  ResourceGroupName: "rsg-github-pr-${{ github.event.number }}"
  ManagementGroupPrefix: "PR-${{ github.event.number }}"
  TopLevelManagementGroupDisplayName: "PR ${{ github.event.number }} Azure Landing Zones"
  SubscriptionName: "sub-unit-test-pr-${{ github.event.number }}"
  Location: "eastus"

jobs:
  bicep_unit_tests:
    name: Test Bicep Files for PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Bicep Build to Test for PR
        shell: pwsh
        run: |
          Get-ChildItem -Recurse -Filter '*.bicep' -Exclude 'callModuleFromACR.example.bicep','orch-hubSpoke.bicep' | ForEach-Object {
              Write-Information "==> Attempting Bicep Build For File: $_" -InformationAction Continue
              $output = bicep build $_.FullName 2>&1
              if ($LastExitCode -ne 0)
              {
                throw $output
              }
              Else
              {
                echo $output
              }   
          }

  bicep_deploy:
    name: Deploy Bicep Files for PR
    runs-on: ubuntu-latest

    environment: BicepUnitTests

    outputs:
      isDeployed: $(${{ env.gitLoggingOUTPUT != ''  }} || ${{ env.gitHubOUTPUT != ''  }} || ${{ env.gitSpokeOUTPUT != ''  }} || ${{ steps.git_management_diff.outputs.diff != '' != ''  }})
      subscriptionID: ${{ env.SUBIDOUTPUT }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.ALZ_AZURE_SECRET_UNIT_TESTS }}
          enable-AzPSSession: true

      - name: Check for managementGroup Changes
        id: git_management_diff
        shell: bash
        run: |
          git_diff1=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/managementGroups/managementGroups.bicep)
          git_diff2=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep)
          git_diff3=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/policy/definitions/custom-policy-definitions.bicep)
          git_diff4=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep)
          git_diff5=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/subscriptionPlacement/subscriptionPlacement.bicep)
          git_diff6=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.bicep)
          if [[ $git_diff1 != '' ]] || [[ $git_diff2 != '' ]] || [[ $git_diff3 != '' ]] || [[ $git_diff4 != '' ]] || [[ $git_diff5 != '' ]] || [[ $git_diff6 != '' ]]
          then echo "gitManagementOutput=setmgmt"  >> $GITHUB_ENV
          fi

      - name: Check for logging Changes
        id: git_logging_diff
        shell: bash
        run: |
          git_logging=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/logging/logging.bicep)
          echo "gitLoggingOUTPUT=$git_logging"  >> $GITHUB_ENV

      - name: Check for hubNetworking Changes
        id: git_hubnetworking_diff
        shell: bash
        run: |
          git_hub=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/hubNetworking/hubNetworking.bicep)
          echo "gitHubOUTPUT=$git_hub" >> $GITHUB_ENV

      - name: Check for spokeNetworking Changes
        id: git_spokenetworking_diff
        shell: bash
        run: |
          git_spoke=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/spokeNetworking/spokeNetworking.bicep)
          echo "gitSpokeOUTPUT=$git_spoke" >> $GITHUB_ENV

      - name: Az CLI Create Subscription for PR
        id: create_subscription
        if: ${{ env.gitManagementOutput != ''  }} || ${{ env.gitLoggingOUTPUT != '' }} || ${{ env.gitHubOUTPUT != ''  }} || ${{ env.gitSpokeOUTPUT != ''  }}
        shell: bash
        run: |
            subid=$(az deployment tenant create --name "deploy-${{ env.SubscriptionName }}" --location ${{ env.Location }} --template-file infra-as-code/bicep/CRML/subscriptionAlias/subscriptionAlias.bicep --parameters @infra-as-code/bicep/CRML/subscriptionAlias/subscriptionAlias.parameters.example.json --parameters parSubscriptionBillingScope=${{ secrets.ALZ_AZURE_SECRET_EA_BILLING_ACCOUNT }} parSubscriptionName=${{ env.SubscriptionName }} | jq .properties.outputs.outSubscriptionId.value)
            echo "SUBIDOUTPUT=$subid" >> $GITHUB_ENV

      - name: Az CLI Refresh subscription list
        id: refresh_subscription
        if: ${{ env.gitManagementOutput != ''  }} || ${{ env.gitLoggingOUTPUT != '' }} || ${{ env.gitHubOUTPUT != ''  }} || ${{ env.gitSpokeOUTPUT != ''  }}
        shell: bash
        run: |
            az account list --refresh
            
      - name: Az CLI Create Resource Group for PR
        id: create_rsg
        if: ${{ env.gitManagementOutput != '' }} || ${{ env.gitLoggingOUTPUT != '' }} || ${{ env.gitHubOUTPUT != '' }} || ${{ env.gitSpokeOUTPUT != '' }}
        shell: bash
        run: |
            az account set --subscription ${{ env.SUBIDOUTPUT }}
            if [ $(az group exists --name ${{ env.ResourceGroupName }} ) == false ]; then
                sleep 300
            fi
            az group create --name ${{ env.ResourceGroupName }} --location ${{ env.Location }}

      - name: Az CLI Deploy Management Groups for PR
        id: create_mgs
        if: ${{ env.gitManagementOutput != '' }} || ${{ env.gitLoggingOUTPUT != '' }} || ${{ env.gitHubOUTPUT != '' }} || ${{ env.gitSpokeOUTPUT != '' }}
        shell: bash
        run: |
          az deployment tenant create --template-file infra-as-code/bicep/modules/managementGroups/managementGroups.bicep --parameters @infra-as-code/bicep/modules/managementGroups/managementGroups.parameters.example.json parTopLevelManagementGroupPrefix=${{ env.ManagementGroupPrefix }} --location ${{ env.Location }}

      - name: Az CLI Deploy Custom Role Definitions for PR
        id: create_rbac_roles
        if: ${{ env.gitManagementOutput != ''  }}
        shell: bash
        run: |
            az deployment mg create --template-file infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep  --parameters @infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.parameters.example.json parAssignableScopeManagementGroupId=${{ env.ManagementGroupPrefix }} --location ${{ env.Location }} --management-group-id ${{ env.ManagementGroupPrefix }}

      - name: Az CLI Deploy Custom Policy Definitions for PR
        id: create_policy_defs
        if: ${{ env.gitManagementOutput != ''  }}
        shell: bash
        run: |
            az deployment mg create --template-file infra-as-code/bicep/modules/policy/definitions/custom-policy-definitions.bicep  --parameters @infra-as-code/bicep/modules/policy/definitions/custom-policy-definitions.parameters.example.json parTargetManagementGroupID=${{ env.ManagementGroupPrefix }} --location ${{ env.Location }} --management-group-id ${{ env.ManagementGroupPrefix }} 

      - name: Az CLI Deploy Logging for PR
        id: create_logging
        if: ${{ env.gitLoggingOUTPUT != '' }}
        shell: bash
        run: |
            az deployment group create --resource-group ${{ env.ResourceGroupName }} --template-file infra-as-code/bicep/modules/logging/logging.bicep --parameters @infra-as-code/bicep/modules/logging/logging.parameters.example.json

      - name: Az CLI Policy Assignment DINE for PR
        id: create_policy_assignment_dine
        if: ${{ env.gitManagementOutput != ''  }}
        shell: bash
        run: |
            az deployment mg create --template-file infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep --parameters @infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.parameters.example-dine.json --location ${{ env.Location }} --management-group-id "${{ env.ManagementGroupPrefix }}-landingzones"
            az deployment mg create --template-file infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.bicep --parameters @infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.parameters.service-principal.example.json --location ${{ env.Location }} --management-group-id "${{ env.ManagementGroupPrefix }}-platform"

      - name: Az CLI Subscription Placement for PR
        id: move_sub
        if: ${{ env.gitManagementOutput != '' }} || ${{ env.gitLoggingOUTPUT != '' }} || ${{ env.gitHubOUTPUT != '' }} || ${{ env.gitSpokeOUTPUT != '' }}
        shell: bash
        run: |
            az deployment mg create --template-file infra-as-code/bicep/modules/subscriptionPlacement/subscriptionPlacement.bicep --parameters parTargetManagementGroupId=${{ env.ManagementGroupPrefix }} parSubscriptionIds='["${{env.SUBIDOUTPUT}}"]' --location ${{ env.Location }} --management-group-id ${{ env.ManagementGroupPrefix }}

      - name: Az CLI Deploy Hub Networking for PR
        id: create_hub_network
        if: ${{ env.gitHubOUTPUT != ''  }}
        shell: bash
        run: |
            az deployment group create --resource-group ${{ env.ResourceGroupName }} --template-file infra-as-code/bicep/modules/hubNetworking/hubNetworking.bicep
          
      - name: Az CLI Deploy Spoke Networking for PR
        id: create_spoke_network
        if: ${{ env.gitSpokeOUTPUT != ''  }}
        shell: bash
        run: |
            az deployment group create --resource-group ${{ env.ResourceGroupName }} --template-file infra-as-code/bicep/modules/spokeNetworking/spokeNetworking.bicep


  bicep_cleanup:
    name: Cleanup Bicep Deployment for PR
    runs-on: ubuntu-latest
    environment: BicepUnitTests
    if: always()
    needs: [bicep_deploy]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.ALZ_AZURE_SECRET_UNIT_TESTS }}
          enable-AzPSSession: true

      - name: Az CLI Remove/Cleanup Deployment
        if: needs.bicep_deploy.outputs.isDeployed
        shell: pwsh
        run: |
            install-module -Name "Az.Accounts" -MinimumVersion "2.5.2" -Force
            install-module -Name "Az.Resources" -MinimumVersion "4.3.0" -Force
            install-module -Name "Az.ResourceGraph" -MinimumVersion "0.7.7"-Force
            .github/scripts/Wipe-ESLZAzTenant.ps1 -tenantRootGroupID "${{ secrets.ALZ_AZURE_SECRET_TENANT_ID }}" -intermediateRootGroupID "${{ env.ManagementGroupPrefix }}" -subscriptionName "${{ env.SubscriptionName }}"
